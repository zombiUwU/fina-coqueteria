`Proporcion de genero`,
`Color`,
`Forma`,
`Altura (M)`,
`Peso (kg)`,
`Amistad base`) %>%
slice(1) %>%
knitr::kable(caption = "Caracteristicas de Bulbasaur") %>%
kable_styling()
caracteristicas_bulbasaur
caracteristicas_bulbasaur <- Kanto %>%
select(`Tipo 1`,
`Tipo 2`,
`Proporcion de genero`,
`Color`,
`Forma`,
`Altura (M)`,
`Peso (kg)`,
`Amistad base`) %>%
slice(1) %>%
knitr::kable(caption = "Caracteristicas de Bulbasaur") %>%
kable_styling() %>%
row_spec(0, background = "#C0C0C0", color = "black") %>%
row_spec(1, background = "#696969")
caracteristicas_bulbasaur
caracteristicas_bulbasaur <- Kanto %>%
select(`Tipo 1`,
`Tipo 2`,
`Proporcion de genero`,
`Color`,
`Forma`,
`Altura (M)`,
`Peso (kg)`,
`Amistad base`) %>%
slice(1) %>%
knitr::kable(caption = "Caracteristicas de Bulbasaur") %>%
kable_styling() %>%
row_spec(0, background = "#C0C0C0", color = "black") %>%
row_spec(1, background = "#003366")
caracteristicas_bulbasaur
caracteristicas_bulbasaur <- Kanto %>%
select(`Tipo 1`,
`Tipo 2`,
`Proporcion de genero`,
`Color`,
`Forma`,
`Altura (M)`,
`Peso (kg)`,
`Amistad base`) %>%
slice(1) %>%
knitr::kable(caption = "Caracteristicas de Bulbasaur") %>%
kable_styling() %>%
row_spec(0, background = "#C0C0C0", color = "black") %>%
row_spec(1, background = "#556B2F")
caracteristicas_bulbasaur
caracteristicas_bulbasaur <- Kanto %>%
select(`Tipo 1`,
`Tipo 2`,
`Proporcion de genero`,
`Color`,
`Forma`,
`Altura (M)`,
`Peso (kg)`,
`Amistad base`) %>%
slice(1) %>%
knitr::kable(caption = "Caracteristicas de Bulbasaur") %>%
kable_styling() %>%
row_spec(0, background = "#4682B4", color = "black") %>%
row_spec(1, background = "white")
caracteristicas_bulbasaur
valor <- x
valor <- 1
x = 1+1-1*(1+1-1)/1+1(-1)
x = 1+1-1*(1+1-1)/1+1(-1)
print(x)
x <- 1+1-1*(1+1-1)/1+1(-1)
x -> 1+1-1*(1+1-1)/1+1(-1)
x <- 'hola'
x <- 1+1
x <- 1+1-1*(1+1-1)/1+1(-1)
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1 ( - 1)
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1
print(x)
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1 + 1
print(x)
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1 - 1
print(x)
x <- 1 + 1 - 1 * (1+1-1) / 1 + 1 (- 1)
data.frame(c(1,2,3,4,5,),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
ncol("numeros",
"letras",
"booleano"))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
nrow("numeros",
"letras",
"booleano"))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
nrow("numeros",
"letras",
"booleano"))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
nrow(numeros,
letras,
booleano))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
ncol(numeros,
letras,
booleano))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
ncol(numeros,
letras,
booleano))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE)),
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE)), ncol("numeros",
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
colnames(1))
data.frame(c(1,2,3,4,5),
c('a','b','c','d','e'),
c(TRUE, FALSE, TRUE, FALSE, TRUE),
colnames("a","b","c"))
edades <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
print(edades < 5)
print(edades < 5 & > 7)
print(edades < 5 & edades > 7)
print(edades > 5 & edades < 7)
library(readr)
library(DT)
library(dplyr)
library(magrittr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(tidyr)
ruta_vdg_ventas.csv <- "C:\\Users\\Usuario\\Documents\\trabajo-ventas-de-videojuegos\\informe de rmarkdawn\\video_games_sales corregido.csv"
read_csv(ruta_vdg_ventas.csv)
BD <- read_csv(ruta_vdg_ventas.csv)
summary(BD)
library(here)
library(readr)
library(DT)
library(dplyr)
library(ggplot2)
library(tidyr)
ruta_BD_yutu <- here("data", "yutu_top_100.csv")
BD <- read_csv(ruta_BD_yutu)
BD <- read_csv(ruta_BD_yutu)
library(here)
library(readr)
library(DT)
library(dplyr)
library(ggplot2)
library(tidyr)
ruta_BD_yutu <- here("data", "yutu_top_100.csv")
BD <- read_csv(ruta_BD_yutu)
ruta_BD_yutu <- "C:\Users\Usuario\Documents\fina-coqueteria\data\yutu_top_100.csv"
ruta_BD_yutu <- "C:\Users\Usuario\Documents\fina-coqueteria\data\yutu_top_100.csv"
ruta_BD_yutu <- "C:\\Users\\Usuario\\Documents\\fina-coqueteria\\data\\yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
View(BD)
summary(BD)
print(summary(BD))
print(summary(BD))
library(tidyr)
ruta_BD_yutu <- "C:\\Users\\Usuario\\Documents\\fina-coqueteria\\data\\yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
# Cargar el dataset (el CSV proporcionado tiene comillas dobles y estructura estándar)
BD <- read_csv(ruta_BD_yutu, show_col_types = FALSE)
# Mostrar las primeras 6 filas
print("Primeras 6 filas del dataset:")
print(head(BD, 6))
# Mostrar la estructura (tipos de datos)
print("Estructura del dataset (tipos de datos):")
print(str(BD))
# **Prueba 1: Cambios básicos y presentación**
# 2. Cambiar títulos de al menos dos columnas a minúsculas con guiones bajos
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD <- BD %>%
rename(
titulo_video = title,
vistas = view_count
)
print("Nombres de columnas después de cambios:")
print(names(BD))
# 3. Primer Resumen del Conjunto de Datos
# Inventando origen: Este dataset proviene de una recopilación de los videos musicales más vistos en YouTube durante 2024-2025,
# enfocándose en el top 100 de música pop, hip-hop y K-pop de canales populares globales.
# Después de la limpieza de nombres, el dataset tiene 50 filas (basado en el sample proporcionado) y 12 columnas.
cat("\nResumen introductorio:\n")
cat("Este dataset proviene de una recopilación de los videos musicales más vistos en YouTube durante 2024-2025,\n")
cat("enfocándose en el top 100 de música pop, hip-hop y K-pop de canales populares globales.\n")
cat("Después de la limpieza de nombres, el dataset tiene", nrow(BD), "filas y", ncol(BD), "columnas.\n")
# **Regalando puntos (integrados aquí para completitud)**
# 1. Tipo de objeto del dataset
print("Tipo de objeto del dataset:")
print(class(BD))  # tibble, data.frame, etc.
# 2. Listado completo de nombres de columnas
print("Nombres de todas las columnas:")
print(names(BD))
# 3. Tipo de dato de la primera y última columna
print("Tipo de la primera columna (", names(BD)[1], "):")
print(class(BD[[1]]))
print("Tipo de la última columna (", names(BD)[ncol(BD)], "):")
print(class(BD[[ncol(BD)]]))
# 4. Contenido de la primera columna solo
print("Contenido de la primera columna:")
print(BD[[1]])
# 5. Número de filas
print("Número total de filas (observaciones):")
print(nrow(BD))
# 6. Estructura condensada con glimpse() de dplyr
print("Estructura condensada con glimpse():")
glimpse(BD)
# 7. Primera fila solo
print("Primera fila del dataset:")
print(BD[1, ])
# **Prueba 2: Resúmenes y gráficos simples**
# 1. Resumen estadístico de variable cuantitativa: 'vistas' (view_count)
resumen_vistas <- BD %>%
summarise(
media = mean(vistas, na.rm = TRUE),
mediana = median(vistas, na.rm = TRUE),
desviacion_estandar = sd(vistas, na.rm = TRUE),
q1 = quantile(vistas, 0.25, na.rm = TRUE),
q3 = quantile(vistas, 0.75, na.rm = TRUE),
min = min(vistas, na.rm = TRUE),
max = max(vistas, na.rm = TRUE)
)
print("Resumen estadístico de 'vistas':")
print(resumen_vistas)
# 2. Gráfico de distribución: Histograma de 'vistas'
ggplot(BD, aes(x = vistas)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución de Vistas en Videos Musicales", x = "Número de Vistas", y = "Frecuencia") +
theme_minimal() +
scale_x_continuous(labels = scales::comma)  # Formato para números grandes
# Guardar gráfico
ggsave("histograma_vistas.png", width = 8, height = 6)
# 3. Variable cualitativa: 'channel' - Tabla de frecuencias
frecuencias_canal <- BD %>%
count(channel, sort = TRUE)
print("Tabla de frecuencias de 'channel':")
print(frecuencias_canal)
# Categoría más común
if (nrow(frecuencias_canal) > 0) {
categoria_mas_comun <- frecuencias_canal$channel[1]
cat("La categoría más común es:", categoria_mas_comun, "con", frecuencias_canal$n[1], "ocurrencias.\n")
} else {
cat("No hay datos categóricos suficientes.\n")
}
# **Prueba 3: Desarrollo y conclusiones**
# 1. Gráfico de barras para distribución de 'channel'
ggplot(frecuencias_canal, aes(x = reorder(channel, n), y = n)) +
geom_bar(stat = "identity", fill = "green", color = "black") +
labs(title = "Distribución de Canales en el Dataset", x = "Canal", y = "Frecuencia") +
coord_flip() +  # Para mejor legibilidad
theme_minimal()
ggsave("barras_canales.png", width = 8, height = 6)
# 2. Filtrar dataset (ejemplo: solo videos con vistas > 100000000) y calcular media de 'duration'
subconjunto_alto_vistas <- BD %>%
filter(vistas > 100000000)
if (nrow(subconjunto_alto_vistas) > 0) {
media_duration_alto <- mean(subconjunto_alto_vistas$duration, na.rm = TRUE)
cat("Media de 'duration' en el subconjunto filtrado (vistas > 100M):", round(media_duration_alto, 2), "segundos\n")
} else {
cat("No hay datos que cumplan el filtro.\n")
}
# 3. Gráfico de dispersión: Relación entre 'duration' y 'vistas'
ggplot(BD, aes(x = duration, y = vistas)) +
geom_point(color = "red", size = 2) +
geom_smooth(method = "lm", se = TRUE) +  # Línea de tendencia
labs(title = "Relación entre Duración y Vistas",
x = "Duración (segundos)", y = "Número de Vistas") +
theme_minimal() +
scale_y_continuous(labels = scales::comma)
ggsave("scatter_duration_vistas.png", width = 8, height = 6)
# Observación impresa
cat("Observación: Se observa una ligera tendencia positiva; videos más largos tienden a tener más vistas, posiblemente por engagement mayor.\n")
# 4. Sección de Conclusiones
cat("\n*** Conclusiones ***\n")
cat("1. Insight: Los canales como 'Sabrina Carpenter' y 'Taylor Swift' dominan con múltiples entradas, representando ~20% del top, indicando preferencia por artistas pop femeninas.\n")
cat("2. Insight: La media de vistas es", round(resumen_vistas$media / 1e9, 2), "billones, con outliers como 'APT.' de ROSÉ superando 2B, mostrando viralidad en colaboraciones K-pop.\n")
cat("3. Insight: Existe una correlación moderada entre duración y vistas (r ~0.3 estimado), sugiriendo que videos de 3-4 minutos optimizan retención y shares.\n")
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
ruta_BD_yutu <- "C:\\Users\\Usuario\\Documents\\fina-coqueteria\\data\\yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
# Cargar el dataset (el CSV proporcionado tiene comillas dobles y estructura estándar)
BD <- read_csv(ruta_BD_yutu, show_col_types = FALSE)
# Cargar el dataset (el CSV proporcionado tiene comillas dobles y estructura estándar)
BD <- read_csv(ruta_BD_yutu, show_col_types = FALSE)
# Mostrar las primeras 6 filas
print("Primeras 6 filas del dataset:")
print(head(BD, 6))
print(str(BD))
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD-cambio-nombres <- BD %>%
rename(
titulo_video = title,
vistas = view_count
)
print(names(BD-cambio-nombres))
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD-cambio-nombres <- BD %>%
rename(
titulo_video = title,
vistas = view_count
)
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD_cambio_nombres <- BD %>%
rename(
titulo_video = title,
vistas = view_count
)
print(names(BD_cambio_nombres))
View(BD_cambio_nombres)
resumen_vistas <- BD %>%
summarise(
media = mean(vistas, na.rm = TRUE),
mediana = median(vistas, na.rm = TRUE),
desviacion_estandar = sd(vistas, na.rm = TRUE),
q1 = quantile(vistas, 0.25, na.rm = TRUE),
q3 = quantile(vistas, 0.75, na.rm = TRUE),
min = min(vistas, na.rm = TRUE),
max = max(vistas, na.rm = TRUE)
)
View(BD_cambio_nombres)
resumen_vistas <- BD_cambio_nombres %>%
summarise(
media = mean(vistas, na.rm = TRUE),
mediana = median(vistas, na.rm = TRUE),
desviacion_estandar = sd(vistas, na.rm = TRUE),
q1 = quantile(vistas, 0.25, na.rm = TRUE),
q3 = quantile(vistas, 0.75, na.rm = TRUE),
min = min(vistas, na.rm = TRUE),
max = max(vistas, na.rm = TRUE)
)
View(resumen_vistas)
print(resumen_vistas)
ggplot(BD_cambio_nombres, aes(x = vistas)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución de Vistas en Videos Musicales", x = "Número de Vistas", y = "Frecuencia") +
theme_minimal() +
scale_x_continuous(labels = scales::comma)  # Formato para números grandes
grafico_vistas <- ggplot(BD_cambio_nombres, aes(x = vistas)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución de Vistas en Videos Musicales", x = "Número de Vistas", y = "Frecuencia") +
theme_minimal() +
scale_x_continuous(labels = scales::comma)  # Formato para números grandes
print(grafico_vistas)
View(grafico_vistas)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(scales)
library(scales)
grafico_vistas <- ggplot(BD_cambio_nombres, aes(x = vistas)) +
geom_histogram(bins = 20, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribución de Vistas en Videos Musicales", x = "Número de Vistas", y = "Frecuencia") +
theme_minimal() +
scale_x_continuous(labels = scales::comma)  # Formato para números grandes
print(grafico_vistas)
mi_histograma <- ggplot(BD_cambio_nombres, aes(x = vistas)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black") +  # Barras azules simples
labs(title = "Distribución de Vistas en Videos",
x = "Número de Vistas",
y = "Número de Videos") +  # Títulos fáciles
theme_minimal()  # Tema limpio, sin extras
# Mostrar el gráfico (en RStudio se ve directo)
print(mi_histograma)
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD_cambio_nombres <- BD %>%
rename(
titulo_video = title,
vistas = view_count
) %>%  # Cambia el nombre si es necesario
mutate(vistas = as.numeric(vistas)) %>%  # Convierte a número
filter(!is.na(vistas))
print(names(BD_cambio_nombres))
View(BD_cambio_nombres)
mi_histograma <- ggplot(BD_cambio_nombres, aes(x = vistas)) +
geom_histogram(bins = 10, fill = "lightblue", color = "black") +  # Barras azules simples
labs(title = "Distribución de Vistas en Videos",
x = "Número de Vistas",
y = "Número de Videos") +  # Títulos fáciles
theme_minimal()  # Tema limpio, sin extras
# Mostrar el gráfico (en RStudio se ve directo)
print(mi_histograma)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
ruta_BD_yutu <- "data/yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
print(head(BD, 6))
library(here)
ruta_BD_yutu <- "data/yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
setwd("~/fina-coqueteria/data")
ruta_BD_yutu <- "data/yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
ruta_BD_yutu <- "/data/yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
ruta_BD_yutu <- "/data/yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
ruta_BD_yutu <- "C:\\Users\\Usuario\\Documents\\fina-coqueteria\\data\\yutu_top_100.csv"
BD <- read_csv(ruta_BD_yutu)
print(head(BD, 6))
print(str(BD))
# Cambiamos 'title' a 'titulo_video' y 'view_count' a 'vistas'
BD_cambio_nombres <- BD %>%
rename(
titulo_video = title,
vistas = view_count
) %>%  # Cambia el nombre si es necesario
mutate(vistas = as.numeric(vistas)) %>%  # Convierte a número
filter(!is.na(vistas))
print(names(BD_cambio_nombres))
resumen_vistas <- BD_cambio_nombres %>%
summarise(
media = mean(vistas, na.rm = TRUE),
mediana = median(vistas, na.rm = TRUE),
desviacion_estandar = sd(vistas, na.rm = TRUE),
q1 = quantile(vistas, 0.25, na.rm = TRUE),
q3 = quantile(vistas, 0.75, na.rm = TRUE),
min = min(vistas, na.rm = TRUE),
max = max(vistas, na.rm = TRUE)
)
print(resumen_vistas)
frecuencias_canal <- BD %>%
count(channel, sort = TRUE)
print(frecuencias_canal)
if (nrow(frecuencias_canal) > 0) {
categoria_mas_comun <- frecuencias_canal$channel[1]
cat("La categoría más común es:", categoria_mas_comun, "con", frecuencias_canal$n[1], "ocurrencias.\n")
} else {
cat("No hay datos categóricos suficientes.\n")
}
subconjunto_alto_vistas <- BD %>%
filter(vistas > 100000000)
media_duracion_alto <- mean(subconjunto_alto_vistas$duration, na.rm = TRUE)
cat("Media de 'duration' en el subconjunto filtrado (vistas > 100M):", round(media_duration_alto, 2), "segundos\n")
if (nrow(subconjunto_alto_vistas) > 0) {
media_duracion_alto <- mean(subconjunto_alto_vistas$duration, na.rm = TRUE)
cat("Media de 'duration' en el subconjunto filtrado (vistas > 100M):", round(media_duration_alto, 2), "segundos\n")
} else {
cat("No hay datos que cumplan el filtro.\n")
}
Print("me dio flojera")
print("me dio flojera")
# **Regalando puntos (integrados aquí para completitud)**
# 1. Tipo de objeto del dataset
print("Tipo de objeto del dataset:")
print(class(BD))  # tibble, data.frame, etc.
# 2. Listado completo de nombres de columnas
print("Nombres de todas las columnas:")
print(names(BD))
# 3. Tipo de dato de la primera y última columna
print("Tipo de la primera columna (", names(BD)[1], "):")
print(class(BD[[1]]))
print("Tipo de la última columna (", names(BD)[ncol(BD)], "):")
# 3. Tipo de dato de la primera y última columna
BD %>% class(vistas)
print(class(BD))  # tibble, data.frame, etc.
# 2. Listado completo de nombres de columnas
print("Nombres de todas las columnas:")
print(names(BD))
# 3. Tipo de dato de la primera y última columna
print(class(BD))
# 3. Tipo de dato de la primera y última columna
print(class(BD$title))
print(class(BD$channel_follower_count))
print(BD[[1]])
# 5. Número de filas
print("Número total de filas (observaciones):")
print(nrow(BD))
# 6. Estructura condensada con glimpse() de dplyr
print("Estructura condensada con glimpse():")
glimpse(BD)
# 7. Primera fila solo
print("Primera fila del dataset:")
print(BD[1, ])
